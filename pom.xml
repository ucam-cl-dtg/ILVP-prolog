<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>uk.ac.cam.arb33.lectureserver</groupId>
	<artifactId>lectureserver</artifactId>
	<packaging>war</packaging>
	<version>1.0</version> 
	<name>Computer Laboratory Lecture Server</name>
	<url>http://prolog.cl.cam.ac.uk/</url>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
		</dependency>
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>3.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.1-901.jdbc4</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.openid4java</groupId>
			<artifactId>openid4java</artifactId>
			<version>0.9.7</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>com.google.template</groupId>
			<artifactId>soy</artifactId>
			<version>2013-04-18</version>
		</dependency>
		<dependency>
			<groupId>uk.ac.cam.ucs</groupId>
			<artifactId>webauth</artifactId>
			<version>0.7.2</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>ls</finalName>
		<plugins>
			<plugin>
				<!-- When constructing skinny plugin, explain where to find external 
					jar files -->
				<artifactId>maven-ear-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<defaultJavaBundleDir>lib/</defaultJavaBundleDir>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
				<version>1.1</version>
				<configuration>
					<url>http://localhost:8080/manager/html</url>
					<server>arb33-local-tomcat</server>
					<username>admin</username>
					<password>admin</password>
					<path>/ls</path>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<!-- build a skinny war without any packaged dependencies (instead dependencies 
						are written in MANIFEST.MF; must be manually copied to server) -->
					<packagingExcludes>WEB-INF/lib/*.jar</packagingExcludes> 
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
					</archive> 
					<!-- Process HTML files and replace ${property.name} with definitions 
						below: -->
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>true</filtering>
							<includes>
								<include>**/*.html</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<properties>
		<!-- HTML files containing ${/name/} (e.g. ${video.url.prefix}) are replaced 
			as follows: -->
		<video.url.prefix>/video</video.url.prefix>
		<!-- These ensure our filter rules use UTF-8 not POSIX or MacRoman! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>
</project>
